{"version":3,"sources":["app/utill/httpservice.js","app/actions.js","app/configreducer.js","app/configactions.js","app/table/invioceListactions.js","app/table/table.jsx","app/pages/profiliepage.jsx","app/pages/loginpage.jsx","app/pages/payment.jsx","app/pages/configpage.jsx","app/layout/layout.jsx","App.js","app/table/invoicelistreducer.js","app/store/reducers.js","app/store/index.js","serviceWorker.js","index.js"],"names":["HttpSevice","baseURL","this","http","Axios","create","url","params","get","requestBody","options","post","initialState","configURL","config","state","action","console","log","type","actionConstants","payload","setConfig","dispatch","actions","setConfigURL","setInvoiceList","invoiceList","setVendorsList","vendorsList","TableComponet","invoice","visible","filteredInfo","sortedInfo","handleChange","pagination","filters","sorter","setState","clearFilters","clearAll","setAgeSort","order","columnKey","showModal","vendor","handleOk","e","props","history","push","httpSevice","paymentPost","then","res","data","handleCancel","prevProp","dataEndPoints","call2","getURL","call3","invoicelist","vendorslist","dataSource","map","index","UI","key","find","vendorId","tableConfig","paymentEnabled","amountDue","payUI","Fragment","onClick","columns","forEach","column","title","displayName","undefined","dataIndex","fieldName","filteringEnabled","filteredValue","name","onFilter","value","record","indexOf","sortingEnabled","sortOrder","a","b","length","display","onChange","onOk","okText","onCancel","event","creditPost","target","React","Component","connect","configreducer","configactions","invioceListactions","withRouter","PaymentComponet","block","ConfigComponet","span","className","size","pull","placeholder","defaultValue","Content","Layout","Header","Footer","Sider","LayoutComponet","collapsed","onCollapse","menuList","label","icon","UserOutlined","route","BarsOutlined","SettingOutlined","theme","style","minHeight","collapsible","defaultSelectedKeys","mode","menu","Item","path","margin","padding","children","textAlign","App","getConfig","exact","component","PaymentComponent","ConfigComponent","rootReducer","combineReducers","middlewares","createLogger","ReduxThunk","createStore","reducers","compose","applyMiddleware","Boolean","window","location","hostname","match","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9538622.chunk.js","sourcesContent":["import Axios from 'axios';\nexport default class HttpSevice {\n    static http = Axios.create({\n        baseURL: 'http://localhost:3000/data/'\n    })\n\n    static setBaseURL(baseURL) {\n        this.http = Axios.create({\n            baseURL\n        });\n    }\n\n    static get(url, params = {}, options = {}) {\n        return this.http.get(url, { params })\n    }\n    static post(url, requestBody = {}, options = {}) {\n        return this.http.post(url, requestBody, options)\n    }\n\n    static getURL(url, params = {}, options = {}) {\n        return Axios.get(url, { params })\n    }\n    static postURL(url, requestBody = {}, options = {}) {\n        return Axios.post(url, requestBody, options)\n    }\n}","export default {\n    SET_CONFIG: 'SET_CONFIG',\n    SET_CONFIG_URL: 'SET_CONFIG_URL',\n    SET_INVOICE_LIST: 'SET_INVOICE_LIST',\n    SET_VENDORS_LIST: 'SET_VENDORS_LIST',\n}","import actionConstants from './actions';\nconst initialState = {\n    configURL: 'http://localhost:3000/data/app/config',\n    config: {},\n};\n\nexport default (state = initialState, action) => {\n    console.log(state,action)\n    switch (action.type) {\n        case actionConstants.SET_CONFIG_URL:\n            return {\n                ...state,\n                configURL: action.payload\n            };\n        case actionConstants.SET_CONFIG:\n            console.log(state)\n            return {\n                ...state,\n                config: action.payload\n            }\n        default:\n            return state;\n    }\n};","import actions from \"./actions\";\nexport default {\n    setConfig: (config) => {\n        return (dispatch) => {\n            dispatch({ type: actions.SET_CONFIG, payload: config });\n        };\n    },\n    setConfigURL: (url) => {\n        console.log(url)\n        return (dispatch) => {\n            dispatch({ type: actions.SET_CONFIG_URL, payload: url });\n        };\n    }\n}","import actions from \"../actions\";\nexport default {\n    setInvoiceList: (invoiceList) => {\n        return (dispatch) => {\n            dispatch({ type: actions.SET_INVOICE_LIST, payload: invoiceList });\n        };\n    },\n    setVendorsList: (vendorsList) => {\n        return (dispatch) => {\n            dispatch({ type: actions.SET_VENDORS_LIST, payload: vendorsList });\n        };\n    },\n}","import React from 'react';\nimport { Table, Button, Modal, Checkbox } from 'antd';\nimport httpSevice from '../utill/httpservice';\nimport configreducer from '../configreducer';\nimport configactions from '../configactions';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport invioceListactions from \"./invioceListactions\";\n\nclass TableComponet extends React.Component {\n\n    invoice = {};\n\n    state = {\n        visible: false,\n        filteredInfo: null,\n        sortedInfo: null,\n    };\n\n    handleChange = (pagination, filters, sorter) => {\n        this.setState({\n            filteredInfo: filters,\n            sortedInfo: sorter,\n        });\n    };\n\n    clearFilters = () => {\n        this.setState({ filteredInfo: null });\n    };\n\n    clearAll = () => {\n        this.setState({\n            filteredInfo: null,\n            sortedInfo: null,\n        });\n    };\n\n    setAgeSort = () => {\n        this.setState({\n            sortedInfo: {\n                order: 'descend',\n                columnKey: 'age',\n            },\n        });\n    };\n\n    componentDidUpdate(prevProp) {\n        console.log(this.props?.config?.config?.dataEndPoints?.call2)\n        if (this.props?.config?.config?.dataEndPoints?.call2 != prevProp?.config?.config?.dataEndPoints?.call2)\n            httpSevice.getURL(this.props?.config?.config?.dataEndPoints?.call2).then(res => {\n                this.props.setInvoiceList(res.data)\n            })\n        if (this.props?.config?.config?.dataEndPoints?.call3 != this.props?.config?.config?.dataEndPoints?.call3)\n            httpSevice.getURL(this.props?.config?.config?.dataEndPoints?.call3).then(res => {\n                this.props.setVendorsList(res.data)\n            })\n    }\n\n    showModal = (invoice, vendor) => {\n        this.invoice = { ...invoice, ...vendor };\n        this.setState({\n            visible: true,\n        });\n    };\n\n    handleOk = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n        this.props.history.push('/payment');\n\n        httpSevice.post(this.props?.config?.config?.paymentPost, {\n            ...this.invoice,\n        }).then((res) => {\n            console.log(res.data)\n        })\n    };\n\n    handleCancel = e => {\n        console.log(e);\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n\n    render() {\n        let { sortedInfo, filteredInfo } = this.state;\n        sortedInfo = sortedInfo || {};\n        filteredInfo = filteredInfo || {};\n        let vendorsList = [...(this.props?.invoicelist?.vendorslist || [])];\n        let dataSource = [...(this.props?.invoicelist?.invoicelist || [])].map((invoice, index) => {\n            let UI = { ...invoice, key: index + 'invoiceList' };\n            let vendor = vendorsList.find((vendor) => vendor.vendorId == invoice.vendorId);\n            console.log(vendor)\n            if (this.props?.config?.config?.tableConfig?.paymentEnabled &&\n                +invoice.amountDue > 0\n            ) {\n                UI.payUI = <React.Fragment key={`payUI${index}`}>\n                    <button onClick={() => this.showModal(vendor, invoice)}>Pay</button>\n                </React.Fragment>\n            }\n            return UI;\n        });\n        let columns = [];\n        [...(this.props?.config?.config?.tableConfig?.columns || [])].forEach((column) => {\n            let data = {\n                title: column.displayName || undefined,\n                dataIndex: column.fieldName || undefined,\n                key: column.fieldName || undefined,\n            };\n            if (column.filteringEnabled) {\n                data.filteredValue = filteredInfo.name || null;\n                data.onFilter = (value, record) => record?.[column.fieldName]?.indexOf(value) === 0;\n            }\n            if (column.sortingEnabled) {\n                data.sortOrder = sortedInfo.columnKey === column.fieldName && sortedInfo.order;\n                data.sorter = (a, b) => a?.[column.fieldName]?.length - b?.[column.fieldName]?.length;\n            }\n            if (column.display)\n                columns.push(data);\n        });\n\n\n        if (this.props?.config?.config?.tableConfig?.paymentEnabled) {\n            columns.push({\n                title: 'Pay',\n                dataIndex: 'payUI',\n                key: 'payUI',\n            })\n        }\n\n        return <React.Fragment>\n            <Table dataSource={dataSource} columns={columns} onChange={this.handleChange} />\n\n            <Modal\n                title={this.invoice[\"name\"]}\n                visible={this.state.visible}\n                onOk={this.handleOk}\n                okText=\"Pay Now\"\n                onCancel={this.handleCancel}\n            >\n                <p>InvoiceId:{this.invoice[\"invoiceId\"]}</p>\n                <p>Vendor Name:{this.invoice[\"vendorName\"]}</p>\n                <p>product:{this.invoice[\"product\"]}</p>\n                <p>amountBal:{this.invoice[\"amountBal\"]}</p>\n                <p>amountDue:{this.invoice[\"amountDue\"]}</p>\n\n                {+this.invoice[\"creditBal\"] > 0 && <React.Fragment>\n                    <Checkbox onChange={(event) => {\n                        httpSevice.post(this.props?.config?.config?.creditPost, {\n                            ...this.invoice,\n                            creditPost: event.target.value\n                        }).then((res) => {\n                            console.log(res.data)\n                        })\n                    }}></Checkbox> Use Credit </React.Fragment>}\n            </Modal>\n        </React.Fragment>\n    }\n}\n\nexport default connect(configreducer, { ...configactions, ...invioceListactions })(withRouter(TableComponet));","import React from 'react';\nexport default class ProfileComponet extends React.Component {\n\n\n    render() {\n        return <React.Fragment>\n            profile page\n            </React.Fragment>\n    }\n}","import React from 'react';\nexport default class LoginComponet extends React.Component {\n\n\n    render() {\n        return <React.Fragment>\n            Login page\n            </React.Fragment>\n    }\n}","import React from 'react';\nimport { Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nclass PaymentComponet extends React.Component {\n\n    render() {\n        return <React.Fragment>\n            Thank you for your Payment\n            <Button type=\"primary\" block onClick={() => {\n                let path = '';\n                this.props.history.push(path);\n            }}>\n                View other Invoices\n            </Button>\n\n        </React.Fragment>\n    }\n}\n\nexport default withRouter(PaymentComponet);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Input } from 'antd';\nimport configreducer from '../configreducer';\nimport configactions from '../configactions';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Space, Row, Col } from 'antd';\nclass ConfigComponet extends React.Component {\n    configURL = '';\n\n    componentWillMount() {\n\n    }\n\n    render() {\n        console.log(this.configURL, this.props)\n        return <React.Fragment>\n            <Row>\n                <Col span={18} push={6}>\n                    <Button className=\"\" type=\"primary\" size={5} onClick={() => {\n                        this.props.history.push('');\n                    }}>\n                        Save\n                    </Button>\n                </Col>\n                <Col span={6} pull={18}>\n                    <Input placeholder=\"config url to be loaded\" onChange={(event) => {\n                        console.log(event.target.value)\n                        this.props.setConfigURL(event.target.value)\n                    }} defaultValue={this.props?.config?.configURL} />\n                </Col>\n            </Row>\n\n\n        </React.Fragment>\n    }\n}\n\nexport default connect(configreducer, { ...configactions })(withRouter(ConfigComponet));","import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport {\n    UserOutlined,\n    BarsOutlined,\n    SettingOutlined\n} from '@ant-design/icons';\nimport { withRouter } from 'react-router-dom';\nimport { Input } from 'antd';\n\nconst { Header, Content, Footer, Sider } = Layout;\nclass LayoutComponet extends React.Component {\n    state = {\n        collapsed: true,\n    };\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    menuList = [\n        {\n            label: 'Admin',\n            icon: <UserOutlined />\n        },\n        {\n            label: 'Invoices',\n            route: '',\n            icon: <BarsOutlined />\n        },\n        {\n            label: 'Config',\n            route: 'config',\n            icon: <SettingOutlined />\n        }\n    ];\n\n    render() {\n        return <React.Fragment>\n            <Layout theme=\"light\" style={{ minHeight: '100vh' }}>\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n                    <div className=\"logo\" />\n                    <Menu theme=\"dark\" defaultSelectedKeys={['menuItem1']} mode=\"inline\">\n                        {this.menuList.map((menu, index) => <Menu.Item key={\"menuItem\" + index}\n                            onClick={() => {\n                                let path = menu.route || '';\n                                this.props.history.push(path);\n                                console.log('menu', menu)\n                            }}\n                            icon={menu.icon}>\n                            {menu.label}\n                        </Menu.Item>)}\n\n                    </Menu>\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <Content style={{ margin: '0 16px' }}>\n                        <Breadcrumb style={{ margin: '16px 0' }}>\n                            <Breadcrumb.Item>User</Breadcrumb.Item>\n                            <Breadcrumb.Item>Invoices</Breadcrumb.Item>\n                        </Breadcrumb>\n                        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                            {this.props.children}\n                        </div>\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>iVoyant -Payment submited by Akhil( +91 90143 92233 )</Footer>\n                </Layout>\n            </Layout>\n        </React.Fragment>\n    }\n}\n\nexport default withRouter(LayoutComponet);","import React from 'react';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  withRouter\r\n} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport TableComponet from './app/table/table';\r\nimport ProfileComponet from './app/pages/profiliepage';\r\nimport LoginComponet from './app/pages/loginpage';\r\nimport PaymentComponent from './app/pages/payment';\r\nimport ConfigComponent from './app/pages/configpage';\r\nimport LayoutComponet from './app/layout/layout';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport configreducer from './app/configreducer';\r\nimport configactions from './app/configactions';\r\nimport Axios from \"axios\";\r\nclass App extends React.Component {\r\n\r\n  componentDidMount() {\r\n    console.log(this.props)\r\n    this.getConfig()\r\n  }\r\n  async getConfig() {\r\n    if (this.props?.config?.configURL)\r\n      await Axios.get(this.props?.config?.configURL).then(config => {\r\n        console.log(\"config updated\", config.data)\r\n        this.props.setConfig(config.data)\r\n      })\r\n    else this.props.history.push('config');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <LayoutComponet>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={TableComponet} />\r\n            <Route path=\"/payment\" component={PaymentComponent} />\r\n            <Route path=\"/config\" component={ConfigComponent} />\r\n            <Route path=\"*\" component={ConfigComponent} />\r\n          </Switch>\r\n        </LayoutComponet>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(configreducer, { ...configactions })(withRouter(App));","import actionConstants from '../actions'\n\nconst initialState = {\n    invoicelist: [],\n    vendorslist: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case actionConstants.SET_INVOICE_LIST:\n            return {\n                ...state,\n                invoicelist: action.payload\n            };\n        case actionConstants.SET_VENDORS_LIST:\n            return {\n                ...state,\n                vendorslist: action.payload\n            };\n        default:\n            return state;\n    }\n};","import configreducer from '../configreducer';\nimport invoicelistreducer from '../table/invoicelistreducer';\nimport { combineReducers } from 'redux';\nconst rootReducer = combineReducers({\n    config: configreducer,\n    invoicelist: invoicelistreducer\n});\n\nexport default rootReducer;","import thunkMiddleware from 'redux-thunk';\nimport {\n  createStore,\n  applyMiddleware,\n  compose\n} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\nimport ReduxThunk from \"redux-thunk\" \n\nfunction getInitialState() {\n  return {}\n}\n\nexport default ((initialState = getInitialState()) => {\n  let middlewares = [createLogger(),ReduxThunk];\n  return createStore(reducers, initialState, compose(applyMiddleware(...middlewares)));\n})();\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store/';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconsole.log(store)\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}